getgenv().settings = {
    Enabled = true,
    Hitbox = 'Head',
    Keybind = Enum.KeyCode.LeftShift,
    FOVRadius = 100,
    Smoothness = 1,
    PredictionAmount = 0.2 -- Amount of prediction in seconds
}


local Players = game:GetService('Players')
local RunService = game:GetService('RunService')
local UserInputService = game:GetService('UserInputService')

local LocalPlayer = Players.LocalPlayer
local CurrentCamera = workspace.CurrentCamera

local Storage = {}
local FOV = Drawing.new('Circle')

do
    FOV.Visible = true

    UserInputService.InputChanged:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseMovement then
            FOV.Position = UserInputService:GetMouseLocation()
        end
    end)

    FOV.Thickness = 1
    FOV.Color = Color3.new(1, 1, 1)
end

function PredictPosition(player)
    -- Predicts the future position of the player based on their current velocity and position
    local humanoid = player.Character:FindFirstChildOfClass('Humanoid')
    local rootPart = player.Character:FindFirstChild(getgenv().settings.Hitbox)
    if not humanoid or not rootPart then
        return rootPart.Position
    end
    local currentPos = rootPart.Position
    local currentVel = humanoid.RootPart.Velocity
    local predictionTime = settings.PredictionAmount
    local predictedPos = currentPos + currentVel * predictionTime
    return predictedPos
end

RunService.PostSimulation:Connect(function()
    local MousePosition = UserInputService:GetMouseLocation()
    Storage.Target = nil
    Storage.TargetDistance = settings.FOVRadius
    FOV.Radius = settings.FOVRadius

    for i, player in next, Players:GetChildren() do
        local Humanoid = player.Character and player.Character:FindFirstChildWhichIsA('Humanoid')
        local HumanoidRootPart = player.Character and player.Character:FindFirstChild(getgenv().settings.Hitbox)
        if not Humanoid or not HumanoidRootPart or player == LocalPlayer then
            continue
        end
        if Humanoid.Health <= 0 then
            continue
        end
        local ScreenPosition, ScreenVisible = CurrentCamera:WorldToViewportPoint(HumanoidRootPart.Position)
        ScreenPosition = Vector2.new(ScreenPosition.X, ScreenPosition.Y)
        local MouseDistance = (MousePosition - ScreenPosition).magnitude
        if not ScreenVisible then
            continue
        end
        if MouseDistance < Storage.TargetDistance then
            Storage.Target = player
            Storage.TargetDistance = MouseDistance
        end
    end

    if Storage.Target ~= nil then
        local HitPart = Storage.Target.Character:FindFirstChild(settings.Hitbox)
        if UserInputService:IsKeyDown(settings.Keybind) and settings.Enabled then
            local TargetPartPosition = CurrentCamera:WorldToViewportPoint(PredictPosition(Storage.Target))
            local RelativeMousePosition = Vector2.new(TargetPartPosition.X, TargetPartPosition.Y) - MousePosition
            mousemoverel(RelativeMousePosition.X * settings.Smoothness, RelativeMousePosition.Y * settings.Smoothness)
        end
    end
end)
